import socket
import sys
import traceback
import errno
import sys, json
import estimate as est
sys.path.append(".")
from drawgif import SequenceAnimator


class rlserver:
    HOST_IP= '127.0.0.1'
    PORT=int(2000)

    def __init__(self, host=HOST_IP, port=PORT):
        self.host = host
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        print("Socket Established")

        try:
            self.socket.bind((self.host, self.port))
        except socket.error as e:
            print("Bind failed", e)
            sys.exit()

        print("Bind completed")

    def connect(self):
        self.socket.listen(3)
        print("Waiting for connection from web client..")
        self.client_sock, self.address = self.socket.accept()
        print("Connected to web client @ ", self.address, "!")

        # receive the first message from client, know the client address
        # print ("PC Connected")

    def disconnect(self):
        try:
            self.socket.close()
            print("successfully disconnected")
        except Exception as e:
            print("disconnection exception: %s" % str(e))


    def send(self, msg):
        try:
            self.client_sock.sendto(msg.encode(), self.address)
            print("sent to web client: %s" % (msg))

        except Exception as e:
            print("write exception: %s" % str(e))


    def getrequest(self):
        try:
            msg = self.client_sock.recv(1024)
            print("read from web client: %s" % (msg))
            return msg

        except socket.error as e:
            print("socket error ", e)

        except IOError as e:
            print("PC read exception: ", e)
            print(traceback.format_exc())
            pass


server=rlserver()

while True:
   server.connect()
   requestStr=server.getrequest()
   requestStr=requestStr.decode(encoding='utf-8')
   if len(requestStr)==0:
       print('null request sent!')
       continue

   elif (requestStr[0] == 'p'):
       print('-' * 20 + 'plotting gif' + '-' * 20)
       sa=SequenceAnimator()
       drawstatus=sa.plotgif(int(requestStr[1:]), '\seq')
       server.send(drawstatus)

       """try:
           mymongo.connect()
           print(json.dumps(mymongo.findseq_byid(int(requestStr[1:]), 1)))

       except Exception as e:
           print('exception', e)"""


   elif (requestStr[0] == 's'):

       try:
           # mymongo.connect()
           print('-'*20+'predict similar play'+'-'*20)
           print("estimating similar play ids...")
           print(requestStr[1:])
           topsimilars = est.gettop5(int(requestStr[1:]), False)
           """
           for i in topsimilars:
               plotstatus=ad.plotgif(int(i),'\seq')
               if (plotstatus!='0'):
                   break"""

           server.send(json.dumps(topsimilars))

       except Exception as e:
           print('exception', e)


   elif (requestStr[0] == 't'):
       try:
           # mymongo.connect()
           print('-'*20+'predict tactic labels'+'-'*20)
           print("estimating from tactic pool...")
           print(requestStr[1:])
           plotstatus = '-1'
           toptactics = est.gettop5(int(requestStr[1:]), True)
           """
           for i in topsimilars:
               plotstatus=ad.plotgif(int(i),'\seq')
               if (plotstatus!='0'):
                   break"""

           server.send(json.dumps(toptactics))

       except Exception as e:
           print('exception', e)
